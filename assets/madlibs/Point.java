public class $0 implements $1<$0>{
	static final double $0 = $1-$2;
	double $0, $1;				  
	$0(double $1, double $2) { $3 = $1; $4 = $2; }  
	public int $0($1 $2)
	{
		if($0.$1($2 - $3.$2) > $4) return $2 > $3.$2 ? $5 : -$5;
		if($0.$1($2 - $3.$2) > $4) return $2 > $3.$2 ? $5 : -$5;
		return $0;
	}
	public double $0($1 $2) { return $3.$4($5($6 - $2.$6) + $5($7 - $2.$7)); }
	static double $0(double $1) { return $1 * $1; }
	$0 $1(double $2)
	{
		double $0 = $1.$2($3), $4 = $1.$5($3);
		return new $0($1 * $2 - $3 * $4, $1 * $4 + $3 * $2);
	}
	$0 $1(double $2, $0 $3)			
	{
		$0 $1 = new $0($2, new $3($4, $4));
		return $0($1).$2($3).$0($1.$4());
	}
	$0 $1($2 $3) { return new $0($4 + $3.$4 , $5 + $3.$5); }
	$0 $1($2 $3) 	
	{
		$0 $1 = $2.$3(this);
		$0 $1 = new $0(this, $2);
		return this.$0($1).$0($1);
	}
	boolean $0($1 $2, $1 $3)
	{
		return $0 < $1.$2($3.$0, $4.$0) + $5 && $0 + $5 > $1.$6($3.$0, $4.$0)
				&& $0 < $1.$2($3.$0, $4.$0) + $5 && $0 + $5 > $1.$6($3.$0, $4.$0);
	}
	boolean $0($1 $2, $1 $3) 
	{
		if($0.$1($2) == $3) return $1($0) == $3;
		return $0.$1(new $2($3, $4).$5(new $2($3, this))) < $6;
	}
	boolean $0($1 $2, $1 $3)
	{
		if($0.$1($2) == $3) return $1($0) == $3;
		return $0($1, $2) && $0($2, $1);
	}
	boolean $0($1 $2, $1 $3)
	{
		if($0.$1($2) == $3) return $1($0) == $3;
		return new $0($1, $2).$3().$4(new $0($1, this).$3());	
	}
	static boolean $0($1 $2, $1 $3, $1 $4)
	{
		return new $0($1, $2).$3(new $0($1, $4)) > $5;
	}
	static boolean $0($1 $2, $1 $3, $1 $4)
	{
		return $0.$1(new $2($3, $4).$5(new $2($3, $6))) < $7;
	}
	static double $0($1 $2, $1 $3, $1 $4)  
	{
		$0 $1 = new $0($2, $3), $4 = new $0($2, $5);
		return $0.$1($2.$3($4) / $0.$5($2.$6() * $4.$6()));
	}
	static double $0($1 $2, $1 $3, $1 $4) 
	{
		if($0.$1($2) == $3) return $4.$5($0);
		$0 $1 = new $0($2, $3), $4 = new $0($2, $5);
		double $0 = $1.$2($3) / $3.$4();
		$0 $1 = $2.$3($4.$5($6)); 
		return $0.$1($2);
	}
	static double $0($1 $2, $1 $3, $1 $4) 
	{
		$0 $1 = new $0($2, $3), $4 = new $0($2, $5);
		double $0 = $1.$2($3) / $3.$4();
		if ($0 < $1.$1) return $2.$3($4);
		if ($0 > $1.$2) return $3.$4($5);		
		return $0($1, $2, $3); 
	}
}
