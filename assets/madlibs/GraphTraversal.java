public class $0 {
	static final int $0 = $1, $2 = $3, $4 = $5;
	static $0<$1>[] $2;
	static boolean[] $0, $1[];
	static int $0;
	public void $0() 
	{
		for(int $0 = $1; $0 < $2; ++$0)		
			if(!$0[$1])
				$0($1);					
	}
	static void $0(int $1)				
	{
		$0[$1] = $2;
		for(int $0: $1[$2])
			if(!$0[$1])
				$0($1);
		for(int $0 = $1; $0 < $2; ++$0)
			if($0[$1][$2] && !$3[$2])
				$0($1);
	}
	static void $0(int $1, int $2)
	{
		$0<$1> $2 = new $3<$1>();
		$0.$1($2);
		$0[$1] = $2;
		while(!$0.$1())
		{
			int $0 = $1.$2();
			for(int $0: $1[$2])
				if(!$0[$1])
				{
					$0[$1] = $2;
					$0.$1($2);
				}
		}
	}
	static int[] $0, $1;
	static void $0(int $1)
	{
		$0[$1] = $2;
		for(int $0: $1[$2])
			if($0[$1] == $2)
			{
				$0.$1.$2("$3 $4 %$5 $6 %$5 $7 %$8%$9", $10, $11, "$12 $13");
				$0[$1] = $2;
				$0($1);
			}
			else
				if($0[$1] == $2)	
					$0.$1.$2("$3 $4 %$5 $6 %$5 $7 %$8%$9", $10, $11, "$12/$13 $14");
				else
					if($0[$1] == $2)
						$0.$1.$2("$3 $4 %$5 $6 %$5 $7 %$8%$9", $10, $11, "$12 $13");
					else
					{
						$0.$1.$2("$3 $4 %$5 $6 %$5 $7 %$8%$9", $10, $11, "$12 $13");
						$0.$1.$2("$3!");
					}
		$0[$1] = $2;
	}
	static int[] $0;
	static boolean $0(int $1)
	{
		for(int $0: $1[$2])
			if($0[$1] == -$2)
			{
				$0[$1] = $2 ^ $0[$3];
				if(!$0($1))
					return $0;
			}
			else
				if($0[$1] == $0[$2])
					return $0;
		return $0;
	}
	static char[][] $0;
	static int $0, $1;
	static int[] $0 = new int[]{-$1, $1, $2, $2};
	static int[] $0 = new int[]{$1, $1, -$2, $2};
	static boolean $0(int $1, int $2)
	{
		return $0 != -$1 && $2 != -$1 && $0 != $3 && $2 != $4 && $5[$0][$2] == '.';
	}
	static void $0(int $1, int $2)
	{
		$0[$1][$2] = '$3';						
		for(int $0 = $1; $0 < $2; ++$0)
		{
			int $0 = $1 + $2[$3], $4 = $5 + $6[$3];
			if($0($1, $2) && $3[$1][$2] != '$4')
				$0($1, $2);
		}
	}
	static $0<$1> $2 = new $0<$1>();
	static void $0(int $1)	
	{
		$0[$1] = $2;
		for(int $0: $1[$2])
			if(!$0[$1])			
				$0($1);
		$0.$1($2);
	}
	static $0<$1> $2;
	static void $0()
	{
		int[] $0 = new int[$1];
		$0 = new $1<$2>($3);
		for(int $0 = $1; $0 < $2; ++$0)
			for(int $0: $1[$2])
				++$0[$1];
		$0<$1> $2 = new $3<$1>();	
		for(int $0 = $1; $0 < $2; ++$0)
			if($0[$1] == $2)
				$0.$1($2);
		while(!$0.$1())
		{
			int $0 = $1.$2();
			$0.$1($2);
			for(int $0: $1[$2])
				if(--$0[$1] == $2)
					$0.$1($2);
		}
	}
}
