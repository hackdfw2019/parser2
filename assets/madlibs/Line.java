public class $0 {
	static final double $0 = $1, $2 = $3-$4;
	double $0, $1, $2;
	$0($1 $2, $1 $3)
	{
		if($0.$1($2.$3 - $4.$3) < $5) {	$6 = $7; $8 = $9; $10 = -$2.$3;	}
		else
		{
			$0 = ($1.$2 - $3.$2) / ($3.$4 - $1.$4);
			$0 = $1.$2;
			$0 = -($1 * $2.$3 + $2.$4);
		}
	}
	$0($1 $2, double $3) { $4 = -$3; $5 = $6; $7 =  -($4 * $2.$8 + $2.$9); } 
	boolean $0($1 $2) { return $3.$4($5 - $2.$5) < $6 && $3.$4($7 - $2.$7) < $6; }
	boolean $0($1 $2) { return $3($2) && $4.$5($6 - $2.$6) < $7; }
	$0 $1($2 $3)
	{
		if($0($1))
			return $0;
		double $0 = ($1 * $2.$3 - $3 * $2.$1) / ($4 * $2.$1 - $1 * $2.$4);
		double $0;
		if($0.$1($2) < $3)
			 $0 = -$1.$2 * $3 - $1.$4;
		else
			$0 = -$1 * $2 - $3;
		return new $0($1, $2);
	}
	$0 $1($0 $2)
	{
		if($0.$1($2) < $3) return new $4(-$5, $6.$7);
		if($0.$1($2) < $3) return new $4($5.$6, -$7);
		return $0(new $1($2, $3 / $4));
	}
}
