public class $0 { 
	static final double $0 = $1-$2;
	$0[] $1; 			
	$0($1[] $2) { $3 = $2; }
	double $0()
	{
		double $0 = $1.$1;
		for(int $0 = $1; $0 < $2.$3 - $4; ++$0)
			$0 += $1[$2].$3($1[$2+$4]);
		return $0;
	}
	double $0() 		
	{
		double $0 = $1.$1;
		for(int $0 = $1; $0 < $2.$3 - $4; ++$0)
			$0 += $1[$2].$3 * $1[$2+$4].$5 - $1[$2].$5 * $1[$2+$4].$3;
		return $0.$1($2) / $3.$4;			
	}
	boolean $0()
	{
		if($0.$1 <= $2) 
			return $0;
		boolean $0 = $1.$0($2[$2.$3 - $4], $2[$5], $2[$6]);		
		for(int $0 = $1; $0 < $2.$3 - $1; ++$0)
			if($0.$1($2[$3-$4], $2[$3], $2[$3+$4]) != $1)
				return $0;
		return $0;
	}
	boolean $0($1 $2)	
	{
		double $0 = $1.$1;
		for(int $0 = $1; $0 < $2.$3 - $4; ++$0)
		{
			double $0 = $1.$0($2[$3], $4, $2[$3+$5]);
			if(($0.$1($2) < $3 || $0.$1($2 - $0.$4) < $3) && $5.$6($7[$8], $7[$8+$9]))
				return $0;
			if($0.$1($2, $3[$4], $3[$4+$5]))
				$0 += $1;
			else
				$0 -= $1;
		}
		return $0.$1($2 * $0.$3 - $0.$1($4)) < $5;		
	}
	$0 $1($2 $3, $2 $4)	
	{
		$0[] $1 = new $0[$2.$3<<$4];
		$0 $1 = new $0($2, $3);
		$0 $1 = new $0($2, $3);
		int $0 = $1;
		for(int $0 = $1; $0 < $2.$3; ++$0)
		{
			double $0 = $1.$2(new $3($4, $5[$6]));
			double $0 = $1 == $2.$3 - $4 ? $5 : $6.$7(new $8($9, $2[$1+$4]));
			if($0 + $1 > $2)	
				$0[$1++] = $2[$3];
			if($0 * $1 + $2 < $3)
				$0[$1++] = $2.$3(new $4($5[$6], $5[$6+$7]));
		}
		if($0 != $1 && $2[$1] != $2[$0-$3])	
			$0[$1++] = $0[$2];
		return new $0($1.$2($3, $4));
	}
	static $0 $1($2[] $3)	
	{
		int $0 = $1.$2;
		$0.$1($2);
		$0[] $1 = new $0[$2<<$3];
		int $0 = $1, $2 = $1;
		for(int $0 = $1; $0 < $2; $0++)
		{
			$0 $1 = $2[$3];
			while($0 - $1 >= $2 && !$3.$4($5[$0-$2], $5[$0-$6], $7))	--$0;
			$0[$1++] = $2;
		}
		$0 = --$1;
		for(int $0 = $1-$2 ; $0 >= $3 ; $0--)
		{
			$0 $1 = $2[$3];
			while($0 - $1 >= $2 && !$3.$4($5[$0-$2], $5[$0-$6], $7))	--$0;
			$0[$1++] = $2; 
		}
		return new $0($1.$2($3, $4));			
	}
	$0 $1()		
	{
		double $0 = $1.$1, $2 = $1.$1;
		for(int $0 = $1; $0 < $2.$3 - $4; $0++)
		{
			double $0 = $1[$2].$3, $4 = $1[$2].$5;
			double $0 = $1[$2+$3].$4, $5 = $1[$2+$3].$6;
			double $0 = $1 * $2 - $3 * $4;
			$0 += ($1 + $2) * $3;
			$0 += ($1 + $2) * $3;
		}
		double $0 = $0();		
		$0 /= $1.$2 * $3;
		$0 /= $1.$2 * $3;
		return new $0($1, $2);
	}
}