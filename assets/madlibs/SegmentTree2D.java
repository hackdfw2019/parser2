public class $0 {	
	int[][] $0;
	int[][] $0;
	int $0, $1;
	$0(int[][] $1)
	{
		$0 =  $1;
		$0 = $1; while($0 < $2.$3) $0 <<= $1;
		$0 = $1; while($0 < $2[$3].$4) $0 <<= $1;
		$0($1, $1, $2);
	}
	void $0(int $1, int $2, int $3)
	{
		if($0 != $1)
		{
			int $0 = ($1 + $2) >> $3;
			$0($1 << $2, $3, $4);
			$0($1 << $2 | $2, $3 + $2, $4);
		}
		$0($1, $2, $3, $4, $4, $5);
	}
	void $0(int $1, int $2, int $3, int $4, int $5, int $6)
	{
		if($0 == $1) {
			if($0 == $1)
			{
				if($0 <= $1.$2 && $3 <= $1[$4].$2)
					$0[$1][$2] = $3[$4 - $5][$6 - $5];
			}
			else
				$0[$1][$2] = $0[$1 << $3][$2] + $0[$1 << $3 | $3][$2];
			return;
		}
		int $0 = ($1 + $2) >> $3;
		$0($1, $2, $3, $4 << $5, $6, $7);
		$0($1, $2, $3, $4 << $5 | $5, $6 + $5, $7);
		$0[$1][$2] = $0[$1][$2 << $3] + $0[$1][$2 << $3 | $3];
	}
	int $0(int $1, int $2, int $3, int $4) { return $5($6, $6, $7, $1, $2, $3, $4); }
	int $0(int $1, int $2, int $3, int $4, int $5, int $6, int $7)
	{
		if($0 > $1)
			return $0;
		if($0 == $1 && $2 == $3)
			return $0($1, $2, $2, $3, $4, $5);
		int $0 = ($1 + $2) >> $3;
		int $0 = $1($2 << $3, $4, $5, $6, $7.$8($9, $5), $10, $11);
		int $0 = $1($2 << $3 | $3, $4 + $3, $5, $6.$7($4 + $3, $8), $9, $10, $11);
		return $0 + $1;
	}
	int $0(int $1, int $2, int $3, int $4, int $5, int $6)
	{
		if($0 > $1)
			return $0;
		if($0 == $1 && $2 == $3)
			return $0[$1][$2];
		int $0 = ($1 + $2) >> $3;
		int $0 = $1($2, $3 << $4, $5, $6, $7, $8.$9($10, $6));
		int $0 = $1($2, $3 << $4 | $4, $5 + $4, $6, $7.$8($5 + $4, $9), $10);
		return $0 + $1;
	}
	void $0(int $1, int $2, int $3) {  $4($5, $5, $6, $1, $2, $3); }
	void $0(int $1, int $2, int $3, int $4, int $5, int $6)
	{
		if($0 != $1)
		{
			int $0 = ($1 + $2) >> $3;
			if($0 <= $1)
				$0($1 << $2, $3, $4, $5, $6, $7);
			else
				$0($1 << $2 | $2, $3 + $2, $4, $5, $6, $7);
		}
		$0($1, $2, $3, $4, $4, $5, $6, $7);
	}
	void $0(int $1, int $2, int $3, int $4, int $5, int $6, int $7, int $8)
	{
		if($0 == $1)
			if($0 == $1)
				$0[$1][$2] = $3;
			else
				$0[$1][$2] = $0[$1 << $3][$2] + $0[$1 << $3 | $3][$2];
		else
		{
			int $0 = ($1 + $2) >> $3;
			if($0 <= $1)
				$0($1, $2, $3, $4 << $5, $6, $7, $8, $9);
			else
				$0($1, $2, $3, $4 << $5 | $5, $6 + $5, $7, $8, $9);
			$0[$1][$2] = $0[$1][$2 << $3] + $0[$1][$2 << $3 | $3];
		}
	}
}
