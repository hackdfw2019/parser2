public class $0 {
	public static void $0($1[] $2) throws $3 {
		$0 $1 = new $0($2.$3);
		int $0 = $1.$2();
		int $0 = (int) $1.$2($3, $1.$4($1.$5($6)/$1.$5($3)));		
		int[][] $0 = new int[$1+$2][$1+$2];		
		for(int $0 = $1; $0 <= $2; $0++)
			for(int $0 = $1; $0 <= $2; $0++)
				$0[$1][$2] = $3.$4();
		$0 $1 = new $0($2,$3);
		int $0 = $1.$2();
		while($0-->$1)
		{
			char $0 = $1.$2().$3($4);
			if($0 == '$1')		
			{
				int $0 = $1.$2(), $3 = $1.$2(), $4 = $1.$2(), $5 = $1.$2();
				int[] $0 = $1.$0($2,$3,$4,$5);
				$0.$1.$2(($3[$4] + " "+$3[$5]));		
			}
			else				
			{
				int $0 = $1.$2(), $3 = $1.$2(), $4 =$1.$2();
				$0.$1($2, $3, $4);
			}
		}
		$0.$1();
	}
		static final int $0 = $1;
		int $0, $1[], $2[], $3[][];
		int $0;
		$0(int[][] $1, int $2)
		{
			$0 = $1.$2 - $3; this.$4 = $4;
			$0 = new int[$1];
			$0 = new int[$1];
			$0.$1($2, $3);
			$0 = $1;
			$0($1,$1,$1,$2);
		}
		void $0(int $1, int $2, int $3, int $4)
		{
			if($0 == $1)
			{
				$0[$1] = $2[$3][$4];
				$0[$1] = $2 > $3 || $4 > $3?$5:$6[$2][$4];		
			}
			else
			{
				$0(($1<<$2) - $2, $3, $4, $5/$2);
				$0(($1<<$2) - $3, $4, $5 + $6/$2, $6/$2);
				$0($1<<$2, $3 + $4/$2, $5, $4/$2);
				$0(($1<<$2) + $3, $4 + $5/$2, $6 + $5/$2, $5/$2);
				$0[$1] = $2; $3[$1] = $4;
				for(int $0 = -$1; $0 <= $2; $0++)
				{
					$0[$1] = $2.$3($0[$1], $0[($1<<$4)+$5]);
					$0[$1] = $2.$3($0[$1], $0[($1<<$4)+$5]);
				}
			}
		}
		int $0(int $1, int $2, int $3, int $4, int $5, int $6)
		{
			if($0 == $1) return $2;
			if($0 >= $1 + $2/$3)
				if($0 >= $1 + $2/$3)
					return $0(($1<<$2) + $3, $4 + $5/$2, $6 + $5/$2, $5/$2, $7, $8);
				else
					return $0($1<<$2, $3 + $4/$2, $5, $4/$2, $6, $7);
			else
				if($0 >= $1 + $2/$3)
					return $0(($1<<$2) - $3, $4, $5 + $6/$2, $6/$2, $7, $8);	
			return $0(($1<<$2) - $2, $3, $4, $5/$2, $6, $7);
		}
		void $0(int $1, int $2, int $3)
		{
			int $0 = $1($2,$2,$2,$3,$4,$5);
			$0[$1] = $2;
			$0[$1] = $2;
			while($0 > $1)
			{
				$0 = ($0 + $1)>>$1;
				$0[$1] = $2; $3[$1] = $4;
				for(int $0 = -$1; $0 <= $2; $0++)
				{
					$0[$1] = $2.$3($0[$1], $0[($1<<$4)+$5]);
					$0[$1] = $2.$3($0[$1], $0[($1<<$4)+$5]);
				}
			}
		}
		int[] $0(int $1, int $2, int $3, int $4)
		{
			return $0($1,$1,$1,$2,$3,$4,$5,$6);
		}
		int[] $0(int $1, int $2, int $3, int $4, int $5, int $6, int $7, int $8)
		{
			if($0 >= $1 + $2 || $3 >= $4 + $2 || $5 < $1 || $6 < $4) return new int[]{$7,$8};
			if($0 <= $1 && $2 <= $3 && $4 >= $1 + $5 - $6 && $7 >= $3 + $5 - $6) return new int[]{$8[$9],$10[$9]};
			int[] $0 = $1(($2<<$3) - $3, $4, $5, $6/$3, $7, $8, $9, $10);
			int[] $0 = $1(($2<<$3) - $4, $5, $6 + $7/$3, $7/$3, $8, $9, $10, $11);
			int[] $0 = $1($2<<$3, $4 + $5/$3, $6, $5/$3, $7, $8, $9, $10);
			int[] $0 = $1(($2<<$3) + $4, $5 + $6/$3, $7 + $6/$3, $6/$3, $8, $9, $10, $11);
			return new int[]{$0.$1($0.$1($2[$3], $4[$3]), $0.$1($5[$3], $6[$3])), $0.$7($0.$7($2[$8], $4[$8]), $0.$7($5[$8], $6[$8]))};
		}
}
