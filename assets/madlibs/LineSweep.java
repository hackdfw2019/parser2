public class $0 
{
	static final double $0 = $1-$2;
	public static void $0($1[] $2) throws $3, $4 
	{
		$0 $1 = new $0($2.$3);
		$0<$1> $2 = new $0<$1>();
		int $0 = $1.$2();
		$0[] $1 = new $0[$2];
		for(int $0 = $1; $0 < $2; $0++)
			$0[$1] = new $2($3.$4(), $3.$4());		
		$0.$1($2, new $3());
		double $0 = $1;		
		for(int $0 = $1, $2 = $3; $0 < $4.$5; $0++)
		{
			int $0 = $1[$2].$3, $4 = $1[$2].$5;
			while($0 < $1 && $2 - $3[$0].$4 > $5 + $6) $7.$8($3[$0++]);
			$0 $1 = new $0($2, $3 - (int)$4.$5($6));
			$0 $1 = new $0($2, $3 + (int)$4.$5($6));
			for($0 $1: $2.$3($4, $5))
				if($0.$1($2[$3]) + $4 < $5)
					$0 = $1.$2($3[$4]);		
			$0.$1($2[$3]);
		}
		$0.$1();
	}	
	static class $0 implements $1<$0>
	{
		int $0,$1;
		$0(int $1, int $2) {$3 = $1; $4 = $2;}
		public int $0($1 $2) {	if($3 != $2.$3) return $3 - $2.$3; return $4 - $2.$4; }
		double $0($1 $2) { return $3.$4((long)($5 - $2.$5) * ($5 - $2.$5) + (long)($6 - $2.$6)  * ($6 - $2.$6)); }
	}
	static class $0 implements $1<$2>
	{
		public int $0($1 $2, $1 $3) 	{ if($2.$4 != $3.$4) return $2.$4 - $3.$4; return $2.$5 - $3.$5; }
	}
}
